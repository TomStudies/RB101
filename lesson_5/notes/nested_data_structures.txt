Nested Data Structures

Nested arrays contain arrays, each with their own index.
  -For examppe, a = [[1, 3],[2, 4]]
  -a[0] = [1, 3]
  -a[0][1] = 3

We can easily update collection elements too.
  -a[0][1] = 5 => [[1, 5],[2, 4]] (destructive)
  -a[1] << 3 => [[1, 5],[2, 4, 3]] (destructive)
  -a[0] << [3] => [[1, 5, [3]],[2, 4, 3]] (destructive, now 3 layers)

Hashes can be nested within an array as well.
  -animals = [{ a: 'ant' }, { b: 'bear' }]

These can also be modified:
  -animals[0][:c] = 'cat' => [{ :a => "ant", :c => "cat" }, { :b => "bear" }] (destructive)

Placing variables pointing to other collections in collections behaves as such:
  -a = [1, 3]
  -b = [2]
  -arr = [a, b]
  -a[1] = 5
  -Therefore, arr = [[1, 5], [2]]
  -If we did arr[0][1] = 8, a becomes [1, 8]
  -They point to the same object!

Sometimes a collection needs to be copied.
To copy objects, Ruby provides two methods: dup and clone.
  -These create a shallow copy, meaning that the object the method is called on will be copied, but contained objects within that object will be SHARED and not copied.
  -arr1 = ["a", "b", "c"]
  -arr2 = arr1.dup (would be the same with clone)
  -arr2[1].upcase! *It is the object you are affecting, not the collection itself, and objects are shared.
  -arr2 # => ["a", "B", "c"]
  -arr1 # => ["a", "B", "c"] (also upcased)
  -If you call, for example, a .map! on one array object it will not change the elements of the other.

There is a difference between dup and clone: Whether they preservethe state of frozen objects
  -If .freeze is called on an array and then clone is called on it, the second array will also be frozen.
  -If .freeze is called on an array and then dup is called on it, the second array will not be frozen.
  -.freeze disallows an object to be modified. They will throw a runtime error if you try.
  -Only mutable objects can be frozen. Immutable objects are already frozen.
  -.frozen? is a method you can use to check if an object is frozen.

freeze only freezes the object it is called upon, if it is called upon a collection then the objects within the collection will not be frozen.
  -arr = [[1], [2], [3]].freeze
  -arr[2] << 4
  -arr => [[1], [2], [3, 4]]
  
There is no built in way to deep copy or deep freeze objects in ruby, though it is possible to build that functionality.

When working with nested collections, always keep track of the level of the collection you are working on.

